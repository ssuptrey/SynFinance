# SynFinance Docker Compose Configuration
# Production-ready multi-service setup

version: '3.8'

services:
  # Main SynFinance API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    image: synfinance:latest
    container_name: synfinance-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - SYNFINANCE_ENV=production
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=INFO
    volumes:
      - ./data:/app/data:ro  # Read-only data mount
      - ./output:/app/output  # Output directory
      - ./logs:/app/logs      # Logs directory
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - synfinance-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Prometheus Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: synfinance-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - synfinance-network
    profiles:
      - monitoring

  # Grafana Dashboards (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: synfinance-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123  # Change in production!
      - GF_INSTALL_PLUGINS=
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/provisioning/dashboards/system_overview.json
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./monitoring/grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - synfinance-network
    profiles:
      - monitoring

  # PostgreSQL Database (Optional - for persistence)
  postgres:
    image: postgres:15-alpine
    container_name: synfinance-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=synfinance
      - POSTGRES_PASSWORD=synfinance_password  # Change in production!
      - POSTGRES_DB=synfinance
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U synfinance"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - synfinance-network
    profiles:
      - database

  # Redis Cache (Optional - for caching)
  redis:
    image: redis:7-alpine
    container_name: synfinance-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - synfinance-network
    profiles:
      - cache

networks:
  synfinance-network:
    driver: bridge
    name: synfinance-net

volumes:
  prometheus-data:
    name: synfinance-prometheus-data
  grafana-data:
    name: synfinance-grafana-data
  postgres-data:
    name: synfinance-postgres-data
  redis-data:
    name: synfinance-redis-data
