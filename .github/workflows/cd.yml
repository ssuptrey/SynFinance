# SynFinance Continuous Deployment Workflow
# Builds and publishes Docker images on releases

name: CD - Continuous Deployment

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags (e.g., v0.6.6, v1.0.0)
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v0.6.6)'
        required: true
        default: 'v0.6.6'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Build and Push Docker Image
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub (optional)
        if: secrets.DOCKERHUB_USERNAME != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version from tag
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            synfinance/synfinance
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build and push production image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push development image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.dev
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev
            synfinance/synfinance:dev
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  # Job 2: Test Docker Image
  test-docker:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pull Docker image
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Run container
        run: |
          docker run -d --name synfinance-test \
            -p 8000:8000 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Wait for container to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'

      - name: Test API endpoints
        run: |
          curl -f http://localhost:8000/health
          curl -f http://localhost:8000/docs

      - name: Stop container
        run: docker stop synfinance-test

      - name: Check logs
        if: always()
        run: docker logs synfinance-test

  # Job 3: Create GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: test-docker
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Extract version
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          
          # Generate changelog from commits
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD)
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.changelog.outputs.VERSION }}
          release_name: Release ${{ steps.changelog.outputs.VERSION }}
          body: |
            ## SynFinance ${{ steps.changelog.outputs.VERSION }}
            
            ### What's New
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ### Docker Images
            - Production: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.changelog.outputs.VERSION }}`
            - Development: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev`
            
            ### Installation
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.changelog.outputs.VERSION }}
            docker run -p 8000:8000 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.changelog.outputs.VERSION }}
            ```
            
            See [CHANGELOG.md](./CHANGELOG.md) for full details.
          draft: false
          prerelease: false

  # Job 4: Deployment Summary
  summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [build-and-push, test-docker, create-release]
    if: always()
    
    steps:
      - name: Print deployment status
        run: |
          echo "Docker Build: ${{ needs.build-and-push.result }}"
          echo "Docker Test: ${{ needs.test-docker.result }}"
          echo "Release: ${{ needs.create-release.result }}"
          
          if [ "${{ needs.build-and-push.result }}" == "success" ] && [ "${{ needs.test-docker.result }}" == "success" ]; then
            echo "Deployment successful!"
          else
            echo "Deployment failed!"
            exit 1
          fi
